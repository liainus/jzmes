#coding=utf-8
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy import create_engine, Column,ForeignKey, Table, DateTime, Integer, String
from sqlalchemy import Column, DateTime, Float, Integer, String, Unicode
from Model.system import Base,session,Organization
from datetime import datetime
from pbkdf2 import PBKDF2


'''用户表'''
class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, autoincrement=True, primary_key=True)
    user_name = Column(String(60), nullable=False)
    job_number = Column(String(50), nullable=False)
    # 私有，通过下面定义的方法进行访问
    _password = Column('password', String(128), nullable=False)
    email = Column(String(50), nullable=False)
    tel = Column(String(50), nullable=False)
    create_time = Column(DateTime, default=datetime.now)

    roles = relationship("Role", secondary=UserToRole.__table__)
    organizatons = relationship("Organization", secondary=OrganizationToUser.__table__)

    def __repr__(self):
        return 'id:{},user_name:{},job_number:{},_password:{},email:{},tel:{},create_time:{}'.format(
            self.id,
            self.user_name,
            self.job_number,
            self.password,
            self.email,
            self.tel,
            self.create_time,
        )

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_login_id(cls, login_id):
        return session.query(cls).filter_by(login_id=login_id).first()

    @classmethod
    def by_email(cls, email):
        return session.query(cls).filter_by(email=email).first()

    def by_name(cls, name):
        return session.query(cls).filter_by(user_name=name).first()

    def _hash_password(self, password):
        return PBKDF2.crypt(password, iterations=0x2537)

    @property
    def password(self):
        return self._password

    @password.setter
    def password(self, password):
        # print(self._hash_password(password))
        self._hash_password(password)
        self._password = self._hash_password(password)

    def auth_password(self, other_password):
        if self._password is not None:
            return self.password == PBKDF2.crypt(other_password, self.password)
        else:
            return False

'''角色表'''
class Role(Base):
    __tablename__ = "Role"

    # id:
    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)

    # 角色编码:
    role_code = Column(String(100), primary_key=False, autoincrement=False, nullable=True)

    # 角色顺序:
    role_sequence = Column(String(10), primary_key=False, autoincrement=False, nullable=True)

    # 角色名称:
    role_name = Column(String(200), primary_key=False, autoincrement=False, nullable=True)

    # 角色说明:
    description = Column(String(2048), primary_key=False, autoincrement=False, nullable=True)

    # 创建时间:
    create_time = Column(DateTime, primary_key=False, autoincrement=False, nullable=True)

    # 创建人:
    creator = Column(String(20), primary_key=False, autoincrement=False, nullable=True)


    users = relationship("User", secondary=UserToRole.__table__)

    def __repr__(self):
        return 'id:{},role_code:{},role_sequence:{},role_name:{},description:{},create_time:{},creator:{}'.format(
            self.id,
            self.role_code,
            self.role_sequence,
            self.role_name,
            self.description,
            self.create_time,
            self.creator,
        )

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_id(cls, id):
        return session.query(cls).filter_by(id=id).first()

    @classmethod
    def by_name(cls, name):
        return session.query(cls).filter_by(role_name=name).first()

'''用户与角色关联表'''
class UserToRole(Base):
    __tablename__ = 'user_to_role'
    user_id = relationship(Integer, ForeignKey('user.id'), primary_key=True)
    role_id = relationship(Integer, ForeignKey('Role.id'), primary_key=True)

'''组织与用户关联表'''
class OrganizationToUser(Base):
    __tablename__ = 'organization_to_user'
    organization_id = Column(Integer, ForeignKey("Organization.id"), primary_key=True)
    user_id = Column(Integer, ForeignKey("User.id"), primary_key=True)



'''处理器'''
class Handler(Base):
    __tablename__ = 'permission_handler'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(50), nullable=False)
    p_id = Column(Integer, ForeignKey("permission_permission.id"))

    permission = relationship("Permission", uselist=False)

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_id(cls, id):
        return session.query(cls).filter_by(id=id).first()

    @classmethod
    def by_name(cls, name):
        return session.query(cls).filter_by(name=name).first()

'''菜单表'''
class Menu(Base):
    __tablename__ = 'permission_menu'
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(50), nullable=False)
    p_id = Column(Integer, ForeignKey("permission_permission.id"))

    permission = relationship("Permission", uselist=False)  # 要赋值一个Permission类的对象

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_id(cls, id):
        return session.query(cls).filter_by(id=id).first()

    @classmethod
    def by_name(cls, name):
        return session.query(cls).filter_by(name=name).first()

'''权限与角色关联表'''
class PermissionToRole(Base):
    """权限角色多对多关系表"""
    __tablename__ = 'permission_to_role'
    p_id = Column(Integer, ForeignKey("permission_permission.id"), primary_key=True)
    r_id = Column(Integer, ForeignKey("permission_role.id"), primary_key=True)

'''权限表'''
class Permission(Base):
    """权限表"""
    __tablename__ = 'permission_permission'
    id = Column(Integer, primary_key=True, autoincrement=True)
    module_id = Column(Integer, ForeignKey("module.id"))
    name = Column(String(50), nullable=False)
    strcode = Column(String(50), nullable=False)  # 权限码

    roles = relationship("Role", secondary=PermissionToRole.__table__)

    menu = relationship("Menu", uselist=False)

    handler = relationship("Handler", uselist=False)

    module = relationship("Module", uselist=False)

    def __repr__(self):
        return 'id:{},module_id:{},module_name:{},strcode:{}'.format(
            self.id,
            self.module_id,
            self.name,
            self.strcode
        )

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_id(cls, id):
        return session.query(cls).filter_by(id=id).first()

    @classmethod
    def by_name(cls, name):
        return session.query(cls).filter_by(name=name).first()

'''组织表'''
# class Organization(Base):
#     __tablename__ = "Organization"
#     #ID:
# 	ID = Column(Integer, primary_key=True, autoincrement=True, nullable=False)
#
# 	# 组织结构编码:
# 	OrganizationCode = Column(Unicode(100), primary_key=False, autoincrement=False, nullable=True)
#
# 	# 父组织机构:
# 	ParentNode = Column(Integer, primary_key=False, autoincrement=False, nullable=True)
#
# 	# 顺序号:
# 	OrganizationSeq = Column(Unicode(10), primary_key=False, autoincrement=False, nullable=True)
#
# 	# 组织机构名称:
# 	OrganizationName = Column(Unicode(200), primary_key=False, autoincrement=False, nullable=True)
#
# 	# 说明:
# 	Description = Column(Unicode(2048), primary_key=False, autoincrement=False, nullable=True)
#
# 	# 创建人:
# 	CreatePerson = Column(Unicode(20), primary_key=False, autoincrement=False, nullable=True)
#
# 	# 创建时间:
# 	CreateDate = Column(DateTime, primary_key=False, autoincrement=False, nullable=False)
#
#     #显示图标:
# 	Img = Column(Unicode(40), primary_key=False, autoincrement=False, nullable=True)
#
#     #显示图标:
# 	Color = Column(Unicode(40), primary_key=False, autoincrement=False, nullable=True)
#
#     users = relationship("User", secondary=OrganizationToUser.__table__)


'''模块表'''
class Module(Base):
    __tablename__ = 'module'
    id = Column(Integer, primary_key=True, autoincrement=True)
    module_name = Column(String(100), nullable=False)
    module_type = Column(String(100), nullable=False)
    # 图标
    icon = Column(String(64))
    # 分类
    sort = Column(Integer, nullable=False)
    #组装名
    assemble_name = Column(String(100), nullable=False)
    url = Column(String(100))
    memo = Column(String(max))
    create_time = Column(DateTime, default=datetime.now)
    creator = Column(String(50))

    permission = Column("Permission", uselist=False)

    def __repr__(self):
        return 'id:{},module_name:{},module_type:{},icon:{},sort:{},assembale_name:{}' \
               'url:{},memo:{},create_time:{},creator:{}'.format(
            self.id,
            self.module_name,
            self.module_type,
            self.icon,
            self.sort,
            self.assemble_name,
            self.url,
            self.memo,
            self.create_time,
            self.creator
        )

    @classmethod
    def all(cls):
        return session.query(cls).all()

    @classmethod
    def by_id(cls, id):
        return session.query(cls).filter_by(id=id).first()

    @classmethod
    def by_name(cls, name):
        return session.query(cls).filter_by(module_name=name).first()

